[gd_scene load_steps=7 format=2]

[ext_resource path="res://sources/themes/font_size/main_16.tres" type="DynamicFont" id=1]
[ext_resource path="res://levels/scenes/sub_scenes/screen_trigger.tscn" type="PackedScene" id=2]

[sub_resource type="GDScript" id=2]
script/source = "extends Control

# warning-ignore:unused_signal
signal showing_action_object
# warning-ignore:unused_signal
signal showing_pause
# warning-ignore:unused_signal
signal transition_scene(anim_name)

const viewing_note_res = preload(\"res://levels/scenes/sub_scenes/viewing_note.tscn\")
const pause_menu_res = preload(\"res://levels/scenes/sub_scenes/game_pause.tscn\")

onready var heartbeat = $screen_trigger

func _ready():
	Core.root_gui = self
# warning-ignore:return_value_discarded
	connect(\"showing_action_object\", self, \"_showing_action_object\")
# warning-ignore:return_value_discarded
	connect(\"showing_pause\", self, \"_showing_pause\")
# warning-ignore:return_value_discarded
	connect(\"transition_scene\", self, \"_transition_scene\")
	
	$anim.play('start')

func _process(_delta):
	if Data.saved_performance_monitor:
		_perfomance_monitor()
	else:
		$perfomance_monitor.text = ''

func set_action_name(name):
	$action_name.text = name
	if name == '':
		$back_text.hide()
	else:
		$back_text.show()

func _perfomance_monitor():
	$perfomance_monitor.text = 'FPS: ' \\
	+ str(Performance.get_monitor(Performance.TIME_FPS))

func _showing_action_object():
	if !Core.action_object:
		set_action_name('')
	elif is_instance_valid(Core.action_object) && 'action_name' in Core.action_object:
		set_action_name(Core.action_object.action_name)
		if Core.action_object.action_viewing && Core.action_object.id != 0:
			if Core.action_object_viewing:
				var view_note = viewing_note_res.instance()
				view_note.note_id = Core.action_object.id
				add_child(view_note)
				Core.action_object_viewing = false

func _showing_pause():
	if Core.game_pause:
		var pause = pause_menu_res.instance()
		add_child_below_node($action_name, pause)
		Core.game_pause = false


func _transition_scene(anim_name):
	$anim.play(anim_name)

func _on_anim_animation_finished(anim_name):
	if anim_name == 'end':
		Core.to('main_menu')
		Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE)
		get_tree().paused = false

"

[sub_resource type="Animation" id=6]
length = 0.001
tracks/0/type = "value"
tracks/0/path = NodePath("gui/transition:color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ Color( 0, 0, 0, 1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("gui/transition:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0 ),
"transitions": PoolRealArray( 1 ),
"update": 0,
"values": [ true ]
}

[sub_resource type="Animation" id=4]
resource_name = "end"
length = 0.6
tracks/0/type = "value"
tracks/0/path = NodePath("gui/transition:color")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 0, 0, 0, 0 ), Color( 0, 0, 0, 1 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("gui/transition:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.6 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}

[sub_resource type="Animation" id=5]
resource_name = "start"
length = 0.6
tracks/0/type = "value"
tracks/0/path = NodePath("gui/transition:color")
tracks/0/interp = 2
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 0.5 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Color( 0, 0, 0, 1 ), Color( 0, 0, 0, 0 ) ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("gui/transition:visible")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 0.6 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 1,
"values": [ true, false ]
}

[node name="gui" type="Control"]
pause_mode = 2
anchor_right = 1.0
anchor_bottom = 1.0
script = SubResource( 2 )

[node name="screen_trigger" parent="." instance=ExtResource( 2 )]

[node name="cursor" type="ColorRect" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -2.5
margin_top = -2.5
margin_right = 2.5
margin_bottom = 2.5
color = Color( 0.298039, 0.298039, 0.298039, 0.498039 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="back_text" type="ColorRect" parent="."]
visible = false
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -80.0
margin_top = 11.5
margin_right = 80.0
margin_bottom = 51.5
color = Color( 0.156863, 0.156863, 0.156863, 0.392157 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="action_name" type="Label" parent="."]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -80.0
margin_top = 11.5
margin_right = 80.0
margin_bottom = 51.5
custom_fonts/font = ExtResource( 1 )
align = 1
valign = 1
__meta__ = {
"_edit_use_anchors_": false
}

[node name="perfomance_monitor" type="Label" parent="."]
margin_left = 8.0
margin_top = 8.0
margin_right = 308.0
margin_bottom = 134.0
custom_fonts/font = ExtResource( 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="transition" type="ColorRect" parent="."]
anchor_right = 1.0
anchor_bottom = 1.0
color = Color( 0, 0, 0, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="anim" type="AnimationPlayer" parent="."]
root_node = NodePath("../..")
anims/RESET = SubResource( 6 )
anims/end = SubResource( 4 )
anims/start = SubResource( 5 )

[connection signal="animation_finished" from="anim" to="." method="_on_anim_animation_finished"]
