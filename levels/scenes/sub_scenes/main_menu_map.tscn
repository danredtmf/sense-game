[gd_scene load_steps=6 format=2]

[ext_resource path="res://levels/objects/furniture.tscn" type="PackedScene" id=2]
[ext_resource path="res://levels/assets/p_one_way.tscn" type="PackedScene" id=4]
[ext_resource path="res://levels/assets/p_one_wall.tscn" type="PackedScene" id=5]

[sub_resource type="GDScript" id=2]
script/source = "extends Spatial

const c_red_res = preload(\"res://c_red/c_red.tscn\")
const c_smile_res = preload(\"res://c_smile/c_smile.tscn\")

var chance = 2

var c_red
var c_smile

func _ready():
	var chance_var = randi() % chance + 1
	if Data.is_ending:
		if !Data.is_main_menu_jampscare_done && Data.is_good_ending:
			create_smile_jump()
			create_red()
			Data.is_main_menu_jampscare_done = true
			Data.saving()
		else:
			if chance_var == chance:
				create_smile_jump()
				create_red()
			else:
				create_smile()
				create_red()
	else:
		create_smile()
		create_red()

func create_smile_jump():
	c_smile = c_smile_res.instance()
	c_smile.anim = 'run'
	add_child(c_smile)
	c_smile.global_transform.origin = $smile_jump_pos.global_transform.origin

func create_smile():
	c_smile = c_smile_res.instance()
	add_child(c_smile)
	c_smile.global_transform.origin = $smile_pos.global_transform.origin
	c_smile.visible = false
	$timer_smile.start()

func create_red():
	c_red = c_red_res.instance()
	c_red.anim = 'idle'
	c_red.get_node(\"AnimationPlayer\").get_animation('idle').loop = true
	add_child(c_red)
	c_red.rotation_degrees.y = $red_pos.rotation_degrees.y
	c_red.global_transform.origin = $red_pos.global_transform.origin
	c_red.visible = false
	$timer_red.start()

func _on_timer_red_timeout():
	var _chance = randi() % 5 + 0
	
	match _chance:
		3:
			if c_red.visible:
				c_red.visible = false
			else:
				c_red.visible = true
		2:
			c_red.visible = false

func _on_timer_smile_timeout():
	var _chance = randi() % 5 + 0
	
	match _chance:
		1:
			if c_smile.visible:
				c_smile.visible = false
			else:
				c_smile.visible = true
				Core.root_menu.menu.heartbeat.emit_signal('heart', 0)
		4:
			c_smile.visible = false
		2:
			c_smile.visible = false
"

[sub_resource type="Environment" id=1]
background_mode = 1
ambient_light_color = Color( 0.0784314, 0.0784314, 0.0784314, 1 )
fog_enabled = true
fog_color = Color( 0, 0, 0, 1 )
tonemap_mode = 3
dof_blur_far_distance = 40.0
dof_blur_far_transition = 20.0
dof_blur_near_enabled = true
dof_blur_near_distance = 4.0

[node name="main_menu_map" type="Spatial"]
script = SubResource( 2 )

[node name="WorldEnvironment" type="WorldEnvironment" parent="."]
environment = SubResource( 1 )

[node name="Camera" type="Camera" parent="."]
transform = Transform( 0.965926, -0.258819, 0, 0.258819, 0.965926, 0, 0, 0, 1, 4.19113, 4.8674, 13.6779 )

[node name="p_one_way" parent="." instance=ExtResource( 4 )]
transform = Transform( -4.37114e-07, 0, -10, 0, 10, 0, 10, 0, -4.37114e-07, 0, 0, 10 )
skeleton = NodePath("")

[node name="p_one_way5" parent="." instance=ExtResource( 4 )]
transform = Transform( 10, 0, 0, 0, 10, 0, 0, 0, 10, 10, 0, 0 )
skeleton = NodePath("")

[node name="p_one_wall" parent="." instance=ExtResource( 5 )]
transform = Transform( -10, 0, -8.74228e-07, 0, 10, 0, 8.74228e-07, 0, -10, 0, 0, 0 )
skeleton = NodePath("")

[node name="p_one_way6" parent="." instance=ExtResource( 4 )]
transform = Transform( 10, 0, 0, 0, 10, 0, 0, 0, 10, -10, 0, 0 )
skeleton = NodePath("")

[node name="OmniLight" type="OmniLight" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -6.52498, 4.54625, 20.3826 )
portal_mode = 2
omni_range = 15.0

[node name="furniture" parent="." instance=ExtResource( 2 )]
transform = Transform( -4.37114e-08, 0, -1, 0, 1, 0, 1, 0, -4.37114e-08, 0, 0, -3.82102 )
is_lamp_flashing = true

[node name="smile_jump_pos" type="Position3D" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, -14.5 )

[node name="smile_pos" type="Position3D" parent="."]

[node name="red_pos" type="Position3D" parent="."]
transform = Transform( 0.258819, 0, 0.965926, 0, 1, 0, -0.965926, 0, 0.258819, -5, 0, 0 )

[node name="timer_red" type="Timer" parent="."]

[node name="timer_smile" type="Timer" parent="."]

[connection signal="timeout" from="timer_red" to="." method="_on_timer_red_timeout"]
[connection signal="timeout" from="timer_smile" to="." method="_on_timer_smile_timeout"]
